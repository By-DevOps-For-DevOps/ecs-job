AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Tag:
    Type: String
    Description: Tag of the Docker Image.
    Default: IMAGE_TAG
  EnvironmentName:
    Type: String
    Description: Name of the Environment.
    Default: ENVIRONMENT_NAME
  Email:
    Type: String
    Description: Email address to notify when an API activity has triggered an alarm
    Default: EMAIL
  ECSRepositoryName:
    Type: String
    Description: 'ECS Repository Name'
    Default: ECS_REPOSITORY_NAME

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # The Family name will be used along with ECS_CLUSTER_NAME to prepare the stack name.
      # It should be of Format abb-cdd-sd
      Family: APP_NAME-BUILD_SCOPE
      Cpu: ECS_CPU_COUNT
      Memory: ECS_MEMORY_RESERVATION_COUNT
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
      # TODO: too much power for the task
      TaskRoleArn:
        Fn::ImportValue: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
      ContainerDefinitions:
      - Name: APP_NAME
        Essential: 'true'
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECSRepositoryName}:TAG'
        Ulimits:
          - Name: nofile
            SoftLimit: 2048
            HardLimit: 8192
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'ContainerLogGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub "${EnvironmentName}-APP_NAME"
        Environment:
ENVIRONMENT_VARIABLES

  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${EnvironmentName}-APP_NAME'
      RetentionInDays: 14

  ScheduledTaskRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Trigger ${EnvironmentName}-APP_NAME according to the specified schedule'
      ScheduleExpression: 'cron(10 * * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EnvironmentName}'
          Id: !Sub '${EnvironmentName}-APP_NAME'
          #RoleArn: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            TaskCount: 1
            LaunchType: 'FARGATE'
            PlatformVersion: 'LATEST'
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: DISABLED
                SecurityGroups:
                  - Fn::ImportValue: !Sub '${EnvironmentName}-ECSHostSecurityGroup'
                Subnets:
                  - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet1'
                  - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet2'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
#  Service:
#    Type: AWS::ECS::Service
#    Properties:
#      Cluster:
#        Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
#      LaunchType: FARGATE
#      DesiredCount: DESIRED_COUNT
#      TaskDefinition: !Ref 'TaskDefinition'
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          SecurityGroups:
#            - Fn::ImportValue: !Sub '${EnvironmentName}-ECSHostSecurityGroup'
#          Subnets:
#            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet1'
#            - Fn::ImportValue: !Sub '${EnvironmentName}-PrivateSubnet2'
#
#Outputs:
#  ecsservice:
#    Value:
#      Ref: Service
